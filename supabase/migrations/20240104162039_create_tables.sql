create table public.users (
    id uuid not null,
    created_at timestamp with time zone not null default now(),
    updated_at timestamp with time zone null,
    name text not null,
    email text not null,
    avatar_url text null,    
    is_active boolean not null default true,
    deactivation_reason text null,
    constraint users_pkey primary key (id),
    constraint users_email_key unique (email),
    constraint users_id_fkey foreign key (id) references auth.users (id) on delete cascade
) tablespace pg_default;


create table public.projects (
    id uuid not null default gen_random_uuid (),
    created_at timestamp with time zone not null default now(),
    updated_at timestamp with time zone null,
    name text not null,
    icon_url text null,
    created_by uuid not null,
    updated_by uuid null,
    constraint projects_pkey primary key (id),
    constraint projects_updated_by_fkey foreign key (updated_by) references users (id) on delete cascade,
    constraint projects_created_by_fkey foreign key (created_by) references users (id) on delete cascade
  ) tablespace pg_default;


create table public.tokens (
    id uuid not null default gen_random_uuid (),
    created_at timestamp with time zone not null default now(),
    created_by uuid not null,
    is_active boolean not null default true,
    value text not null,
    constraint tokens_pkey primary key (id),
    constraint tokens_created_by_fkey foreign key (created_by) references users (id) on delete cascade,
    constraint unique_token_value unique (value)
  ) tablespace pg_default;

create table public.project_tokens (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    token_id uuid not null,
    project_id uuid not null,
    created_by uuid not null,
    constraint project_tokens_pkey primary key (id),
    constraint unique_project_token unique (project_id, token_id),
    constraint project_tokens_token_id_fkey foreign key (token_id) references tokens (id) on delete cascade,
    constraint project_tokens_project_id_fkey foreign key (project_id) references projects (id) on delete cascade,
    constraint project_tokens_created_by_fkey foreign key (created_by) references users (id) on delete cascade
  ) tablespace pg_default;

create table public.channels (
    id uuid not null default gen_random_uuid (),
    created_at timestamp with time zone not null default now(),
    updated_at timestamp with time zone null,
    name text not null,
    created_by uuid not null,
    updated_by uuid null,
    project_id uuid not null,
    position smallint not null,
    constraint channels_pkey primary key (id),
    constraint channels_created_by_fkey foreign key (created_by) references users (id) on delete cascade,
    constraint channels_updated_by_fkey foreign key (updated_by) references users (id) on delete cascade,
    constraint channels_project_id_fkey foreign key (project_id) references projects (id) on delete cascade
  ) tablespace pg_default;

create index idx_channels_project_id on public.channels (project_id);

create table public.insights (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    updated_at timestamp with time zone null,
    name text not null,
    value text not null,
    icon text null,
    project_id uuid not null,
    created_by uuid not null,
    constraint insights_pkey primary key (id),
    constraint unique_project_insight unique (project_id, name),
    constraint insights_project_id_fkey foreign key (project_id) references projects (id) on delete cascade,
    constraint insights_created_by_fkey foreign key (created_by) references users (id) on delete cascade
) tablespace pg_default;

create table public.events (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    user_id text null,
    name text not null,
    description text null,
    icon text null,
    channel_id uuid not null,
    created_by uuid not null,
    constraint events_pkey primary key (id),
    constraint events_channel_id_fkey foreign key (channel_id) references channels (id) on delete cascade,
    constraint events_created_by_fkey foreign key (created_by) references users (id) on delete cascade
) tablespace pg_default;


create table public.event_tags (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    key text not null,
    value text not null,
    event_id bigint not null,
    created_by uuid not null,
    constraint event_tags_pkey primary key (id),
    constraint event_tags_event_id_fkey foreign key (event_id) references events (id) on delete cascade,
    constraint event_tags_created_by_fkey foreign key (created_by) references users (id) on delete cascade
) tablespace pg_default;


create extension if not exists moddatetime schema extensions;

create trigger
  handle_updated_at before update
on public.insights
for each row execute
  procedure moddatetime(updated_at);


create trigger
  handle_updated_at before update
on public.users
for each row execute
  procedure moddatetime(updated_at);


create trigger
  handle_updated_at before update
on public.projects
for each row execute
  procedure moddatetime(updated_at);


create trigger
  handle_updated_at before update
on public.channels
for each row execute
  procedure moddatetime(updated_at);